{"version":3,"sources":["mdarea.js"],"names":["root","factory","define","amd","module","exports","MarkdownArea","self","this","ctrlKey","test","navigator","platform","reInlineKey","reDoubledInline","rePrefix","reList","reCleanIndent","rePureIndent","reIncrement","reStripLast","reMkIndent","codeBlocks","`","~","openingParens","[","(","{","<","closingParens","]",")","}",">","elem","_useTab","_useInline","_indent","_reOutdent","_reKey","makeKeyRe","_handleKey","bind","setElement","tab","inline","RegExp","apply","value","s","e","selectionStart","selectionEnd","arguments","length","window","evt","InputEvent","dispatchEvent","prototype","constructor","getElement","_elem","removeEventListener","addEventListener","getValue","setValue","getIndent","setIndent","indent","Array","join","replace","isTabUsed","useTab","ignoreTab","isInlineEnabled","enableInline","disableInline","destroy","defaultPrevented","key","prefix","target","substring","selection","postfix","altKey","metaKey","shiftKey","n","lastIndexOf","handleIndentKey","reOutdent","handleOutdentKey","charAt","shift","info","str","offset","line","m","exec","_","parseInt","console","log","pure","handleEnterKey","preventDefault"],"mappings":"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","file":"mdarea.min.js","sourcesContent":["(function(root, factory) {\n    if (typeof define === 'function' && define.amd) {\n        define([], factory);\n    } else if (typeof module === 'object' && module.exports) {\n        module.exports = factory();\n    } else {\n        root.MarkdownArea = factory();\n    }\n})(typeof self !== 'undefined' ? self : this, function() {\n\n    var isMac = /mac|iphone|ipad|ipod/i.test(navigator.platform),\n        ctrlKey = isMac ? 'metaKey' : 'ctrlKey',\n        reInlineKey = /^[\"'`*_[({<>})\\]]$/,\n        reDoubledInline = /[*_]/,\n        rePrefix = /^[ \\t]*(?:(?:[-+*]|\\d+\\.)[ \\t]+(?:\\[[ x]][ \\t]+)?|>[ \\t]*)*(?::[ \\t]*)?/,\n        reList = /(?:[-+*]|\\d+\\.)[ \\t]+(?:\\[[ x]][ \\t]+)?$/,\n        reCleanIndent = /[-+*\\[\\]x\\d.]/g,\n        rePureIndent = /[^ \\t]/g,\n        reIncrement = /(\\d+)\\.(?=[ \\t]+$)/,\n        reStripLast = /(?:(?:^[ \\t]+)?(?:[-+*]|\\d+\\.|[>:])(?:[ \\t]+\\[[ x]])?[ \\t]*|^[ \\t]+)$/,\n        reMkIndent = /^(?!$)/mg,\n        codeBlocks = {'`': /^``$/m, '~': /^~~$/m},\n        openingParens = {'[': ']', '(': ')', '{': '}', '<': '>'},\n        closingParens = {']': '[', ')': '(', '}': '{', '>': '<'};\n\n\n    function MarkdownArea(elem) {\n        this._useTab = true;\n        this._useInline = true;\n        this._indent = '    ';\n        this._reOutdent = /^[ ]{4}/mg;\n        this._reKey = makeKeyRe(true, true);\n        this._handleKey = this._handleKey.bind(this);\n        this.setElement(elem);\n    }\n\n    MarkdownArea.prototype = {\n        constructor: MarkdownArea,\n\n        getElement: function () {\n            return this._elem;\n        },\n\n        setElement: function (elem) {\n            if (this._elem) {\n                this._elem.removeEventListener('keydown', this._handleKey);\n            }\n\n            this._elem = elem;\n            elem.addEventListener('keydown', this._handleKey);\n        },\n\n        getValue: function () {\n            return this._elem.value;\n        },\n\n        setValue: function (value) {\n            this._elem.value = value;\n        },\n\n        getIndent: function () {\n            return this._indent;\n        },\n\n        setIndent: function (indent) {\n            if (typeof indent === 'number') {\n                this._indent = new Array(indent + 1).join(' ');\n            } else {\n                this._indent = (indent + '').replace(/[^ \\t]/g, ' ');\n            }\n\n            this._reOutdent = new RegExp('^' + this._indent, 'mg');\n        },\n\n        isTabUsed: function () {\n            return this._useTab;\n        },\n\n        useTab: function () {\n            this._useTab = true;\n            this._reKey = makeKeyRe(true, this._useInline);\n        },\n\n        ignoreTab: function () {\n            this._useTab = false;\n            this._reKey = makeKeyRe(false, this._useInline);\n        },\n\n        isInlineEnabled: function() {\n            return this._useInline;\n        },\n\n        enableInline: function () {\n            this._useInline = true;\n            this._reKey = makeKeyRe(this._useTab, true);\n        },\n\n        disableInline: function () {\n            this._useInline = false;\n            this._reKey = makeKeyRe(this._useTab, false);\n        },\n\n        destroy: function () {\n            this._elem.removeEventListener('keydown', this._handleKey);\n            this._elem = this._reKey = this._handleKey = this._indent = this._reOutdent = null;\n        },\n\n        _handleKey: function (evt) {\n            if (!evt.defaultPrevented && this._reKey.test(evt.key)) {\n                var prefix = evt.target.value.substring(0, evt.target.selectionStart),\n                    selection = evt.target.value.substring(evt.target.selectionStart, evt.target.selectionEnd),\n                    postfix = evt.target.value.substring(evt.target.selectionEnd);\n\n                if (evt.key === 'Enter' && !evt.ctrlKey && !evt.altKey && !evt.metaKey) {\n                    handleEnterKey(this._elem, prefix, selection, postfix, evt.shiftKey);\n                } else if (evt.key === 'Tab' && !evt.shiftKey || evt.key === 'i' && evt[ctrlKey]) {\n                    handleIndentKey(this._elem, prefix, selection, postfix, this._indent);\n                } else if (evt.key === 'Tab' && evt.shiftKey || evt.key === 'o' && evt[ctrlKey]) {\n                    handleOutdentKey(this._elem, prefix, selection, postfix, this._indent, this._reOutdent);\n                } else if (reInlineKey.test(evt.key)) {\n                    handleInlineKey(this._elem, prefix, selection, postfix, evt.key);\n                } else {\n                    return;\n                }\n\n                evt.preventDefault();\n            }\n        }\n    };\n\n\n    function makeKeyRe(tab, inline) {\n        return new RegExp('^(?:Enter' + (tab ? '|Tab' : '') + '|[io' + (inline ? '\"\\'`*_([{<>}\\\\])' : '') + '])$');\n    }\n\n\n    function handleEnterKey (elem, prefix, selection, postfix, shift) {\n        var info = !selection ? getLineInfo(prefix) : null;\n\n        if (!selection && info.prefix) {\n            if (!shift && info.prefix === info.line) {\n                prefix = prefix.substring(0, info.offset) + stripLast(info.prefix);\n            \tconsole.log(\"L1 \", info, \"::\", prefix);\n\t    } else if (!shift && isList(info.prefix)) {\n                prefix += \"\\n\" + increment(info.prefix);\n\t\tconsole.log(\"L2 \", info, \"::\", prefix);\n            } else {\n\t\tconsole.log(\"L3 \", info.prefix, \"::\", shift);\n                prefix += \"\\n\" + toIndent(info.prefix, shift);\n            }\n        } else {\n            prefix += \"\\n\";\n        }\n\n        apply(elem, prefix + postfix, prefix.length);\n    }\n\n    function handleIndentKey (elem, prefix, selection, postfix, indent) {\n        var s = prefix.length,\n            n = prefix.lastIndexOf(\"\\n\") + 1;\n\n        if (n < s) {\n            selection = prefix.substring(n) + selection;\n            prefix = prefix.substring(0, n);\n        }\n\n        if (n < s || !selection) {\n            s += indent.length;\n        }\n\n        if (selection) {\n            selection = selection.replace(reMkIndent, indent);\n        } else {\n            prefix += indent;\n        }\n\n        apply(elem, prefix + selection + postfix, s, selection ? n + selection.length : s);\n    }\n\n    function handleOutdentKey (elem, prefix, selection, postfix, indent, reOutdent) {\n        var s = prefix.length,\n            n = prefix.lastIndexOf(\"\\n\") + 1;\n\n        if (n < s) {\n            selection = prefix.substring(n) + selection;\n            prefix = prefix.substring(0, n);\n\n            if (selection.substring(0, indent.length) === indent) {\n                s -= indent.length;\n            }\n        }\n\n        selection = selection.replace(reOutdent, '');\n        apply(elem, prefix + selection + postfix, s, n + selection.length);\n    }\n\n    function handleInlineKey (elem, prefix, selection, postfix, key) {\n        if (!selection && !(key in openingParens) && postfix.charAt(0) === key) {\n            apply(elem, prefix + (reDoubledInline.test(key) ? key + key : '') + postfix, prefix.length + 1);\n        } else if (!selection && (key === \"'\" || key in closingParens)) {\n            apply(elem, prefix + key + postfix, prefix.length + 1);\n        } else if (!selection && key in codeBlocks && codeBlocks[key].test(prefix)) {\n            apply(elem, prefix + key + \"language\\n\" + key + key + key + (postfix.charAt(0) !== \"\\n\" ? \"\\n\" : '') + postfix, prefix.length + 1, prefix.length + 9);\n        } else {\n            apply(\n                elem,\n                prefix + (closingParens[key] || key) + selection + (openingParens[key] || key) + postfix,\n                prefix.length + 1,\n                prefix.length + 1 + selection.length\n            );\n        }\n    }\n\n    function apply(elem, value, s, e) {\n        elem.value = value;\n        elem.selectionStart = s;\n        elem.selectionEnd = arguments.length > 3 ? e : s;\n\n        if ('InputEvent' in window) try {\n            var evt = new InputEvent('input');\n            elem.dispatchEvent(evt);\n        } catch (e) { }\n    }\n\n    function getLineInfo(str) {\n        var offset = str.lastIndexOf(\"\\n\") + 1,\n            line = str.substring(offset),\n            m = rePrefix.exec(line);\n\n        return {\n            line: line,\n            offset: offset,\n            prefix: m && m[0]\n        };\n    }\n\n    function isList(prefix) {\n        return reList.test(prefix);\n    }\n\n    function toIndent(prefix, pure) {\n        return prefix.replace(pure ? rePureIndent : reCleanIndent, ' ');\n    }\n\n    function increment(prefix) {\n        return prefix.replace(reIncrement, function (_, n) {\n            return (parseInt(n) + 1) + '.';\n        })\n    }\n\n    function stripLast(prefix) {\n        return prefix.replace(reStripLast, '');\n    }\n\n\n    return MarkdownArea;\n\n});\n"]}